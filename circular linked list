#include <stdio.h>
# define TRUE 1
struct node
{
    int info;
    struct node *next;
};
void insertAtStart(struct node **l,int value)
{
    struct node *new;
    new=(struct node *)malloc(sizeof(struct node));
    new->info=value;
    new->next=NULL;
    if(*l==NULL)
    {
        *l=new;
        (*l)->next=*l;
    }
    else
    {
        new->next=(*l)->next;
        (*l)->next=new;
    }

}
void insertAtLast(struct node **l,int value)
{
    struct node *newNode;
    newNode=(struct node*)malloc(sizeof(struct node));
    newNode->info=value;
    newNode->next=NULL;
    if(*l==NULL)
    {
        newNode->next=newNode;          //(*l)=newNode;
         *l=newNode;                   //  (*l)->next=newNode;
    }
    else
    {
        newNode->next=(*l)->next;
        (*l)->next=newNode;
        *l=newNode;
    }

}
struct node* search(struct node *l,int value)
{
    struct node *p;
    p=l;
    if(l==NULL)
        return l;
    else if(l->info==value)
        return l;
    else
    {
        while(l->info!=value && l->next!=p )
            l=l->next;
    }
    if(l->info==value)
        return l;
    if(l->next==p)
    {
        l=NULL;
        return l;
    }
}
 void insertAfterValue(struct node **l,int bVal,int aVal)
 {
    struct node *new,*find;
    find=search(*l,bVal);
    if(find==NULL)
        printf("search not found");
    else if(find==(*l))
            insertAtLast(l,aVal);
    else
        {
            new=(struct node*)malloc(sizeof(struct node));
            new->info=aVal;
            new->next=NULL;
            new->next=find->next;
            find->next=new;
        }


}
 int deleteAtFirst(struct node **l)
 {
    int i;
    struct node *ptr;
    if(*l==NULL)
       {
         printf("Underflow");
         return -1;
       }

    else if((*l)->next!=*l)
    {
        ptr=(*l)->next;
        (*l)->next=ptr->next;
        i=ptr->info;
        free(ptr);
        return i;
    }
    else

    {
        i=(*l)->info;
        free(*l);
        *l=NULL;
        return i;
    }
}

 int deleteAtLast(struct node **l)
 {
    int i;
    struct node *temp;
    if(*l==NULL)
   {
         printf("Underflow");
         return -1;

   }
    else if((*l)->next==*l)
    {
        i=(*l)->info;
        free(*l);
        *l=NULL;
        return i;
    }
    else
    {
        temp=*l;
        while(temp->next!=*l)
            temp=temp->next;
            temp->next=(*l)->next;
            i=(*l)->info;
            free(*l);
            *l=temp;
            return i;
    }
 }
 int deleteAtValue(struct node **l,int value)
 {
    int i;
    struct node *find,*temp;
    find=search(*l,value);
    if(find==NULL)
        printf("NOT FOUND");
    else if(find==*l)
        deleteAtLast(l);
    else if(find==((*l)->next))
        deleteAtFirst(l);
    else
    {
        temp=*l;
        while(temp->next!=find)
            temp=temp->next;
        temp->next=find->next;
        i=find->info;
        free(find);
        return i;
    }
 }
 void viewList(struct node *l)
 {
     struct node *p;
     p=l;
     if(l==NULL)
        printf("List is empty");
     else if(l->next==l)
            printf("%d ",l->info);
     else
     {
         while(l->next!=p)
         {
             l=l->next;
             printf("%d ",l->info);
         }
        printf("%d ",l->info);
    }
 }
void printList(struct node *last)
{
    struct node *t;
    if(last)
    {
        t=last;
        t=last->next;
        do
        {
            printf("%d ",t->info);
            t=t->next;

        }while(t!=last->next);


    }
    printf("list is empty");
}
void main()
{
    struct node *i,*last;
    int val,num,choice;
    //menu driven program
    printf("\n1.InsertAtStart");
    printf("\n2.InsertAtLast");
    printf("\n3.InsertAfterValue");
    printf("\n4.DeleteAtStart");
    printf("\n5.DeleteAtLast");
    printf("\n6.DeleteAValue");
    printf("\n7.SearchAValue");
    printf("\n8.ViewList");
    printf("\n0.Exit");
    while(TRUE)
    {
        printList(last);
         printf("\n\n Enter your choice\n");
         scanf("%d",&choice);
         switch(choice)
         {
            case 1:
                    printf("\nEnter number to insert at start\n");
                    scanf("%d",&num);
                    insertAtStart(&last,num);
                    break;
            case 2:
                    printf("\nEnter number to insert at last\n");
                    scanf("%d",&num);
                    insertAtLast(&last,num);
                    break;

            case 3:
                    printf("\nEnter number to insert after\n");
                    scanf("%d",&num);
                    printf("\n Enter number to insert\n");
                    scanf("%d",&val);
                    insertAfterValue(&last,num,val);
                    break;
            case 4:
                    val=deleteAtFirst(&last);
                    if(val!=-1)
                        printf("%d is removed",val);
                    break;
            case 5:
                    val= deleteAtLast(&last);
                    if(val!=-1)
                        printf("%d is removed",val);
                    break;
            case 6:
                    printf("\nEnter number to delete\n");
                    scanf("%d",&num);
                    val=deleteAtValue(&last,num);
                    if(val!=-1)
                         printf("%d is removed",val);
                    break;
            case 7:
                    printf("\nEnter number to search\n");
                    scanf("%d",&num);
                    i=search(last,num);
                    if(i==NULL)
                        printf("NOT FOUND");
                    else
                        printf("%d is found",i->info);
                    break;
            case 8:
                    printList(last);
                    break;
            case 0:
                    exit(0);
                    break;
            default:
                printf("Invalid choice");

         }

    }
 getch();
}
